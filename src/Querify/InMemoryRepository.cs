using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Querify
{
    public class InMemoryRepository : IRepository, IAdvancedRepository
    {
        private readonly Dictionary<Type, IdConfiguration> _idConfigurations; 
        private readonly Dictionary<Type, IList<object>> _store;
        private int lastIntegerId = 0;

        public InMemoryRepository(Action<InMemoryRepositoryConfigurer> configure = null)
        {
            _idConfigurations = new Dictionary<Type, IdConfiguration>();
            _store = new Dictionary<Type, IList<object>>();

            if (configure != null)
            {
                var configurer = new InMemoryRepositoryConfigurer(this);
                configure(configurer);
            }
        }

        public void Add<T>(T entity)
        {
            var store = GetStore<T>();
            var idConfiguration = GetIdConfiguration<T>();
            if (idConfiguration.AutoGenerate)
            {
                idConfiguration.SetIdProperty(entity, idConfiguration.GetAutoGeneratedId());
            }
            store.Add(entity);
        }

        public T Get<T>(object id)
        {
            var idConfiguration = GetIdConfiguration<T>();
            return (T)_store[typeof(T)].SingleOrDefault(x => idConfiguration.GetIdProperty(x).Equals(id));
        }

        public void Remove<T>(T entity)
        {
            var store = GetStore<T>();
            store.Remove(entity);
        }

        public IAdvancedRepository Advanced { get { return this; } }

        IQueryable<T> IAdvancedRepository.Query<T>()
        {
            var store = GetStore<T>();
            return store.Cast<T>().AsQueryable();
        }

        private IList<object> GetStore<T>()
        {
            if (_store.ContainsKey(typeof (T)))
            {
                return _store[typeof (T)];
            }
            
            var store = new List<object>();
            _store[typeof (T)] = store;
            return store;
        }

        private IdConfiguration GetIdConfiguration<T>()
        {
            if (!_idConfigurations.ContainsKey(typeof (T)))
            {
                var configuration = GetDefaultIdConfiguration<T>();

                _idConfigurations[typeof (T)] = configuration;
            }

            return _idConfigurations[typeof (T)];
        }

        private IdConfiguration GetDefaultIdConfiguration<T>()
        {
            var property = typeof (T)
                .GetProperties(BindingFlags.Instance | BindingFlags.Public)
                .SingleOrDefault(x => x.Name == "Id");
            if (property == null)
            {
                throw new InvalidOperationException(
                    string.Format(
                        "Could not determine Id property automatically. You must either have a property named 'Id' on your entity, or supply an Id property expression by calling 'ConfigureIdFor<{0}>()'",
                        typeof (T).Name));
            }

            var configuration = new IdConfiguration
                {
                    GetIdProperty = property.GetValue,
                    SetIdProperty = (target, value) => property.SetValue(target, value),
                    AutoGenerate = true,
                    GetAutoGeneratedId = GetIdGenerator(property.PropertyType)
                };

            return configuration;
        }

        private Func<object> GetIdGenerator(Type type)
        {
            if (type == typeof(Guid))
            {
                return () => Guid.NewGuid();
            }
            else if (type == typeof(int))
            {
                return () => ++lastIntegerId;
            }
            else
            {
                throw new ArgumentException("No auto generator available for type " + type);
            }
        }

        public class InMemoryRepositoryConfigurer
        {
            private readonly InMemoryRepository _repository;

            protected internal InMemoryRepositoryConfigurer(InMemoryRepository repository)
            {
                _repository = repository;
            }

            public InMemoryRepositoryConfigurer ConfigureIdFor<TTarget, TId>(bool manuallyAssignedIds = false)
            {
                var configuration = _repository.GetDefaultIdConfiguration<TTarget>();

                RegisterConfiguration<TTarget, TId>(x => (TId)configuration.GetIdProperty((TTarget)x), (target, id) => configuration.SetIdProperty((TTarget)target, (TId)id), manuallyAssignedIds);
                
                return this;
            }

            public InMemoryRepositoryConfigurer ConfigureIdFor<TTarget, TId>(Func<TTarget, TId> getId, Action<TTarget, TId> setId, bool manuallyAssignedIds = false)
            {
                RegisterConfiguration<TTarget, TId>(x => getId((TTarget)x), (target, id) => setId((TTarget)target, (TId)id), manuallyAssignedIds);
                
                return this;
            }

            private void RegisterConfiguration<TTarget, TId>(Func<object,object> getter, Action<object,object> setter, bool manuallyAssignedIds)
            {
                var configuration = new IdConfiguration
                    {
                        GetIdProperty = getter,
                        SetIdProperty = setter,
                        AutoGenerate = !manuallyAssignedIds
                    };

                if (configuration.AutoGenerate)
                {
                    configuration.GetAutoGeneratedId = _repository.GetIdGenerator(typeof(TId));
                }

                _repository._idConfigurations[typeof(TTarget)] = configuration;
            }

        }

        private class IdConfiguration
        {
            public Func<object, object> GetIdProperty { get; set; }
            public Action<object, object> SetIdProperty { get; set; }
            public bool AutoGenerate { get; set; }
            public Func<object> GetAutoGeneratedId { get; set; }
        }
    }
}